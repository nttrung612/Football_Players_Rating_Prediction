import streamlit as st
import pickle
import pandas as pd

st.title("‚öΩ D·ª± ƒëo√°n ch·ªâ s·ªë t·ªïng quan c·∫ßu th·ªß FIFA")

@st.cache_resource
def load_pipeline():
    with open('pipeline.pkl', 'rb') as file:
        pipeline = pickle.load(file)
    return pipeline

pipeline = load_pipeline()

FEATURE_NAMES = [
    "age", "height_cm", "weight_kgs", "nationality", "preferred_foot", "weak_foot(1-5)", "skill_moves(1-5)", 
    "crossing", "finishing", "heading_accuracy", "short_passing", "volleys", "dribbling", "curve", 
    "freekick_accuracy", "long_passing", "ball_control", "acceleration", "sprint_speed", "agility", 
    "balance", "shot_power", "jumping", "stamina", "strength", "long_shots", "aggression", 
    "interceptions", "positioning", "vision", "penalties", "marking", "standing_tackle", "sliding_tackle", 
    "body_type_Lean", "body_type_Normal", "body_type_Stocky", "positions_CAM", "positions_CB", 
    "positions_CDM", "positions_CF", "positions_CM", "positions_GK", "positions_LB", "positions_LM", 
    "positions_LW", "positions_LWB", "positions_RB", "positions_RM", "positions_RW", "positions_RWB", 
    "positions_ST"
]

@st.cache_resource
def load_data():
    original_data = pd.read_csv('full_data.csv')
    data = pd.read_csv('data.csv')
    return original_data, data

original_data, data = load_data()

# Thanh b√™n tr√°i ƒë·ªÉ ch·ªçn ch·ª©c nƒÉng
st.sidebar.title("Ch·ªçn ch·ª©c nƒÉng")
tab_selected = st.sidebar.selectbox("Ch·ªçn:", ["üîç Ch·ªçn c·∫ßu th·ªß trong d·ªØ li·ªáu", "‚úèÔ∏è ƒêi·ªÅn gi√° tr·ªã c·∫ßu th·ªß"])

if tab_selected == "üîç Ch·ªçn c·∫ßu th·ªß trong d·ªØ li·ªáu":
    # Ch·ªçn c·∫ßu th·ªß trong d·ªØ li·ªáu
    st.subheader("Ch·ªçn c·∫ßu th·ªß ƒë·ªÉ d·ª± ƒëo√°n")
    data_display = original_data.copy()
    data_display['index'] = data_display.index

    # Ch·ªçn m·ªôt m·∫´u d·ªØ li·ªáu t·ª´ danh s√°ch
    selected_index = st.selectbox("Danh s√°ch c·∫ßu th·ªß:", data_display['index'].tolist(), format_func=lambda x: data_display.loc[x, 'name'])

    # L·∫•y h√†ng d·ªØ li·ªáu t·ª´ DataFrame
    selected_row = original_data.iloc[selected_index]

    # Hi·ªÉn th·ªã th√¥ng tin c·∫ßu th·ªß
    st.markdown("### üìã Th√¥ng tin c·∫ßu th·ªß")
    st.table(pd.DataFrame(selected_row).T)

    # D·ª± ƒëo√°n
    if st.button("D·ª± ƒëo√°n"):
        input_df = pd.DataFrame([data.iloc[selected_index].drop(labels=["overall_rating"])])
        # S·∫Øp x·∫øp l·∫°i c·ªôt theo th·ª© t·ª± trong FEATURE_NAMES
        input_df = input_df[FEATURE_NAMES]
        prediction = pipeline.predict(input_df)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.markdown("### üèÜ K·∫øt qu·∫£ d·ª± ƒëo√°n")
        st.success(f"**Ch·ªâ s·ªë d·ª± ƒëo√°n (Overall Rating): {prediction[0]:.2f}**")
        st.info(f"**Ch·ªâ s·ªë th·∫≠t (Overall Rating): {selected_row['overall_rating']}**")

elif tab_selected == "‚úèÔ∏è ƒêi·ªÅn gi√° tr·ªã c·∫ßu th·ªß":
    # ƒêi·ªÅn gi√° tr·ªã c·∫ßu th·ªß
    st.subheader("Nh·∫≠p th√¥ng tin c·∫ßu th·ªß ƒë·ªÉ d·ª± ƒëo√°n")
    
    nationality = st.text_input("Qu·ªëc t·ªãch (VD: Argentina, Brazil, Germany)")
    age = st.number_input("Tu·ªïi", min_value=15, max_value=50)
    height_cm = st.number_input("Chi·ªÅu cao (cm)", min_value=100, max_value=250)
    weight_kgs = st.number_input("C√¢n n·∫∑ng (kg)", min_value=30, max_value=150)
    preferred_foot = st.selectbox("Ch√¢n thu·∫≠n", ["Left", "Right"])
    weak_foot = st.slider("ƒê·ªô m·∫°nh c·ªßa ch√¢n kh√¥ng thu·∫≠n (1-5)", 1, 5)
    skill_moves = st.slider("K·ªπ nƒÉng di chuy·ªÉn (1-5)", 1, 5)
    
    # C√°c k·ªπ nƒÉng chuy√™n m√¥n
    crossing = st.slider("T·∫°t b√≥ng", 0, 100)
    finishing = st.slider("D·ª©t ƒëi·ªÉm", 0, 100)
    heading_accuracy = st.slider("ƒê√°nh ƒë·∫ßu ch√≠nh x√°c", 0, 100)
    short_passing = st.slider("Chuy·ªÅn ng·∫Øn", 0, 100)
    volleys = st.slider("V√¥ l√™", 0, 100)
    dribbling = st.slider("D·∫´n b√≥ng", 0, 100)
    curve = st.slider("ƒê√° cong", 0, 100)
    freekick_accuracy = st.slider("ƒê√° ph·∫°t", 0, 100)
    long_passing = st.slider("Chuy·ªÅn d√†i", 0, 100)
    ball_control = st.slider("Kh·ªëng ch·∫ø b√≥ng", 0, 100)
    acceleration = st.slider("TƒÉng t·ªëc", 0, 100)
    sprint_speed = st.slider("T·ªëc ƒë·ªô ch·∫°y n∆∞·ªõc r√∫t", 0, 100)
    agility = st.slider("Kh√©o l√©o", 0, 100)
    balance = st.slider("ThƒÉng b·∫±ng", 0, 100)
    shot_power = st.slider("S·ª©c m·∫°nh s√∫t", 0, 100)
    jumping = st.slider("Nh·∫£y cao", 0, 100)
    stamina = st.slider("Th·ªÉ l·ª±c", 0, 100)
    strength = st.slider("S·ª©c m·∫°nh", 0, 100)
    long_shots = st.slider("S√∫t xa", 0, 100)
    aggression = st.slider("S·ª± quy·∫øt li·ªát", 0, 100)
    interceptions = st.slider("C·∫Øt b√≥ng", 0, 100)
    positioning = st.slider("Duy tr√¨ v·ªã tr√≠", 0, 100)
    vision = st.slider("T·∫ßm nh√¨n", 0, 100)
    penalties = st.slider("ƒê√° penalty", 0, 100)
    marking = st.slider("K√®m ng∆∞·ªùi", 0, 100)
    standing_tackle = st.slider("Tranh b√≥ng ƒë·ª©ng", 0, 100)
    sliding_tackle = st.slider("Tranh b√≥ng tr∆∞·ª£t", 0, 100)
    
    # D·∫°ng ng∆∞·ªùi
    body_type = st.selectbox("D√°ng ng∆∞·ªùi", ["Lean", "Normal", "Stocky"])
    body_type_Lean = 1 if body_type == "Lean" else 0
    body_type_Normal = 1 if body_type == "Normal" else 0
    body_type_Stocky = 1 if body_type == "Stocky" else 0
    
    # V·ªã tr√≠
    positions = st.multiselect(
        "V·ªã tr√≠ ch∆°i", 
        ["positions_CAM", "positions_CB", "positions_CDM", "positions_CF", "positions_CM", 
         "positions_GK", "positions_LB", "positions_LM", "positions_LW", "positions_LWB", 
         "positions_RB", "positions_RM", "positions_RW", "positions_RWB", "positions_ST"]
    )
    positions_dict = {pos: 1 if pos in positions else 0 for pos in [
        "positions_CAM", "positions_CB", "positions_CDM", "positions_CF", "positions_CM", 
        "positions_GK", "positions_LB", "positions_LM", "positions_LW", "positions_LWB", 
        "positions_RB", "positions_RM", "positions_RW", "positions_RWB", "positions_ST"]}

    # D·ª± ƒëo√°n
    if st.button("D·ª± ƒëo√°n"):
        input_data = {
            'nationality': nationality, 'age': age, 'height_cm': height_cm, 'weight_kgs': weight_kgs,
            'preferred_foot': 1 if preferred_foot == "Right" else 0,
            'weak_foot(1-5)': weak_foot, 'skill_moves(1-5)': skill_moves, 'crossing': crossing,
            'finishing': finishing, 'heading_accuracy': heading_accuracy, 'short_passing': short_passing,
            'volleys': volleys, 'dribbling': dribbling, 'curve': curve, 'freekick_accuracy': freekick_accuracy,
            'long_passing': long_passing, 'ball_control': ball_control, 'acceleration': acceleration,
            'sprint_speed': sprint_speed, 'agility': agility, 'balance': balance, 'shot_power': shot_power,
            'jumping': jumping, 'stamina': stamina, 'strength': strength, 'long_shots': long_shots,
            'aggression': aggression, 'interceptions': interceptions, 'positioning': positioning,
            'vision': vision, 'penalties': penalties, 'marking': marking, 'standing_tackle': standing_tackle,
            'sliding_tackle': sliding_tackle, 'body_type_Lean': body_type_Lean,
            'body_type_Normal': body_type_Normal, 'body_type_Stocky': body_type_Stocky,
            **positions_dict
        }
        
        input_df = pd.DataFrame([input_data])
        # S·∫Øp x·∫øp l·∫°i c·ªôt theo th·ª© t·ª± trong FEATURE_NAMES
        input_df = input_df[FEATURE_NAMES]
        prediction = pipeline.predict(input_df)
        
        st.markdown("### üèÜ K·∫øt qu·∫£ d·ª± ƒëo√°n")
        st.success(f"**Ch·ªâ s·ªë d·ª± ƒëo√°n (Overall Rating): {prediction[0]:.2f}**")
